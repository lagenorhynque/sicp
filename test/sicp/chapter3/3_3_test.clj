(ns sicp.chapter3.3-3-test
  (:require [clojure.test :refer :all]
            [sicp.chapter3.3-3 :refer :all]))

;;;; 3.3  Modeling with Mutable Data

;;; 3.3.3  Representing Tables

;; Exercise 3.24
(deftest make-table''-test
  (let [t (make-table'' :same-key? ==)]
    (is (false? ((t :lookup-proc) 1 2)))
    ((t :insert-proc!) 1 2 :a)
    (is (= :a ((t :lookup-proc) 1 2)))
    (is (= :a ((t :lookup-proc) 1.0 2.0)))
    (is (false? ((t :lookup-proc) 1.0 2.1)))))

;; Exercise 3.25
(deftest multi-dimensional-table-test
  (let [t (make-table)]
    (is (false? (lookup'' [:a] t)))
    (is (false? (lookup'' [:b] t)))
    (is (false? (lookup'' [:a :b] t)))
    (is (false? (lookup'' [:a :b :c] t)))
    (is (false? (lookup'' [:a :b :d] t)))
    (insert!'' [:a] 1 t)
    (is (= 1 (lookup'' [:a] t)))
    (is (false? (lookup'' [:b] t)))
    (is (false? (lookup'' [:a :b] t)))
    (is (false? (lookup'' [:a :b :c] t)))
    (is (false? (lookup'' [:a :b :d] t)))
    (insert!'' [:b] 2 t)
    (is (= 1 (lookup'' [:a] t)))
    (is (= 2 (lookup'' [:b] t)))
    (is (false? (lookup'' [:a :b] t)))
    (is (false? (lookup'' [:a :b :c] t)))
    (is (false? (lookup'' [:a :b :d] t)))
    (insert!'' [:a :b] 3 t)
    (is (= 1 (lookup'' [:a] t)))
    (is (= 2 (lookup'' [:b] t)))
    (is (= 3 (lookup'' [:a :b] t)))
    (is (false? (lookup'' [:a :b :c] t)))
    (is (false? (lookup'' [:a :b :d] t)))
    (insert!'' [:a :b :c] 4 t)
    (is (= 1 (lookup'' [:a] t)))
    (is (= 2 (lookup'' [:b] t)))
    (is (= 3 (lookup'' [:a :b] t)))
    (is (= 4 (lookup'' [:a :b :c] t)))
    (is (false? (lookup'' [:a :b :d] t)))
    (insert!'' [:a :b :d] 5 t)
    (is (= 1 (lookup'' [:a] t)))
    (is (= 2 (lookup'' [:b] t)))
    (is (= 3 (lookup'' [:a :b] t)))
    (is (= 4 (lookup'' [:a :b :c] t)))
    (is (= 5 (lookup'' [:a :b :d] t)))
    (insert!'' [:a :b :c] 6 t)
    (is (= 1 (lookup'' [:a] t)))
    (is (= 2 (lookup'' [:b] t)))
    (is (= 3 (lookup'' [:a :b] t)))
    (is (= 6 (lookup'' [:a :b :c] t)))
    (is (= 5 (lookup'' [:a :b :d] t)))))

;;; Exercise 3.26
(deftest multi-dimensional-table-with-bst-test
  (let [t (make-table)]
    (is (false? (lookup''' [:a] t)))
    (is (false? (lookup''' [:b] t)))
    (is (false? (lookup''' [:a :b] t)))
    (is (false? (lookup''' [:a :b :c] t)))
    (is (false? (lookup''' [:a :b :d] t)))
    (insert!''' [:a] 1 t)
    (is (= 1 (lookup''' [:a] t)))
    (is (false? (lookup''' [:b] t)))
    (is (false? (lookup''' [:a :b] t)))
    (is (false? (lookup''' [:a :b :c] t)))
    (is (false? (lookup''' [:a :b :d] t)))
    (insert!''' [:b] 2 t)
    (is (= 1 (lookup''' [:a] t)))
    (is (= 2 (lookup''' [:b] t)))
    (is (false? (lookup''' [:a :b] t)))
    (is (false? (lookup''' [:a :b :c] t)))
    (is (false? (lookup''' [:a :b :d] t)))
    (insert!''' [:a :b] 3 t)
    (is (= 1 (lookup''' [:a] t)))
    (is (= 2 (lookup''' [:b] t)))
    (is (= 3 (lookup''' [:a :b] t)))
    (is (false? (lookup''' [:a :b :c] t)))
    (is (false? (lookup''' [:a :b :d] t)))
    (insert!''' [:a :b :c] 4 t)
    (is (= 1 (lookup''' [:a] t)))
    (is (= 2 (lookup''' [:b] t)))
    (is (= 3 (lookup''' [:a :b] t)))
    (is (= 4 (lookup''' [:a :b :c] t)))
    (is (false? (lookup''' [:a :b :d] t)))
    (insert!''' [:a :b :d] 5 t)
    (is (= 1 (lookup''' [:a] t)))
    (is (= 2 (lookup''' [:b] t)))
    (is (= 3 (lookup''' [:a :b] t)))
    (is (= 4 (lookup''' [:a :b :c] t)))
    (is (= 5 (lookup''' [:a :b :d] t)))
    (insert!''' [:a :b :c] 6 t)
    (is (= 1 (lookup''' [:a] t)))
    (is (= 2 (lookup''' [:b] t)))
    (is (= 3 (lookup''' [:a :b] t)))
    (is (= 6 (lookup''' [:a :b :c] t)))
    (is (= 5 (lookup''' [:a :b :d] t)))))

(ns sicp.chapter3.3-3-test
  (:require [clojure.test :as t]
            [sicp.chapter3.3-3 :as sut]))

;;;; 3.3  Modeling with Mutable Data

;;; 3.3.3  Representing Tables

;; Exercise 3.24
(t/deftest make-table''-test
  (let [t (sut/make-table'' :same-key? ==)]
    (t/is (false? ((t :lookup-proc) 1 2)))
    ((t :insert-proc!) 1 2 :a)
    (t/is (= :a ((t :lookup-proc) 1 2)))
    (t/is (= :a ((t :lookup-proc) 1.0 2.0)))
    (t/is (false? ((t :lookup-proc) 1.0 2.1)))))

;; Exercise 3.25
(t/deftest multi-dimensional-table-test
  (let [t (sut/make-table)]
    (t/is (false? (sut/lookup'' [:a] t)))
    (t/is (false? (sut/lookup'' [:b] t)))
    (t/is (false? (sut/lookup'' [:a :b] t)))
    (t/is (false? (sut/lookup'' [:a :b :c] t)))
    (t/is (false? (sut/lookup'' [:a :b :d] t)))
    (sut/insert!'' [:a] 1 t)
    (t/is (= 1 (sut/lookup'' [:a] t)))
    (t/is (false? (sut/lookup'' [:b] t)))
    (t/is (false? (sut/lookup'' [:a :b] t)))
    (t/is (false? (sut/lookup'' [:a :b :c] t)))
    (t/is (false? (sut/lookup'' [:a :b :d] t)))
    (sut/insert!'' [:b] 2 t)
    (t/is (= 1 (sut/lookup'' [:a] t)))
    (t/is (= 2 (sut/lookup'' [:b] t)))
    (t/is (false? (sut/lookup'' [:a :b] t)))
    (t/is (false? (sut/lookup'' [:a :b :c] t)))
    (t/is (false? (sut/lookup'' [:a :b :d] t)))
    (sut/insert!'' [:a :b] 3 t)
    (t/is (= 1 (sut/lookup'' [:a] t)))
    (t/is (= 2 (sut/lookup'' [:b] t)))
    (t/is (= 3 (sut/lookup'' [:a :b] t)))
    (t/is (false? (sut/lookup'' [:a :b :c] t)))
    (t/is (false? (sut/lookup'' [:a :b :d] t)))
    (sut/insert!'' [:a :b :c] 4 t)
    (t/is (= 1 (sut/lookup'' [:a] t)))
    (t/is (= 2 (sut/lookup'' [:b] t)))
    (t/is (= 3 (sut/lookup'' [:a :b] t)))
    (t/is (= 4 (sut/lookup'' [:a :b :c] t)))
    (t/is (false? (sut/lookup'' [:a :b :d] t)))
    (sut/insert!'' [:a :b :d] 5 t)
    (t/is (= 1 (sut/lookup'' [:a] t)))
    (t/is (= 2 (sut/lookup'' [:b] t)))
    (t/is (= 3 (sut/lookup'' [:a :b] t)))
    (t/is (= 4 (sut/lookup'' [:a :b :c] t)))
    (t/is (= 5 (sut/lookup'' [:a :b :d] t)))
    (sut/insert!'' [:a :b :c] 6 t)
    (t/is (= 1 (sut/lookup'' [:a] t)))
    (t/is (= 2 (sut/lookup'' [:b] t)))
    (t/is (= 3 (sut/lookup'' [:a :b] t)))
    (t/is (= 6 (sut/lookup'' [:a :b :c] t)))
    (t/is (= 5 (sut/lookup'' [:a :b :d] t)))))

;;; Exercise 3.26
(t/deftest multi-dimensional-table-with-bst-test
  (let [t (sut/make-table)]
    (t/is (false? (sut/lookup''' [:a] t)))
    (t/is (false? (sut/lookup''' [:b] t)))
    (t/is (false? (sut/lookup''' [:a :b] t)))
    (t/is (false? (sut/lookup''' [:a :b :c] t)))
    (t/is (false? (sut/lookup''' [:a :b :d] t)))
    (sut/insert!''' [:a] 1 t)
    (t/is (= 1 (sut/lookup''' [:a] t)))
    (t/is (false? (sut/lookup''' [:b] t)))
    (t/is (false? (sut/lookup''' [:a :b] t)))
    (t/is (false? (sut/lookup''' [:a :b :c] t)))
    (t/is (false? (sut/lookup''' [:a :b :d] t)))
    (sut/insert!''' [:b] 2 t)
    (t/is (= 1 (sut/lookup''' [:a] t)))
    (t/is (= 2 (sut/lookup''' [:b] t)))
    (t/is (false? (sut/lookup''' [:a :b] t)))
    (t/is (false? (sut/lookup''' [:a :b :c] t)))
    (t/is (false? (sut/lookup''' [:a :b :d] t)))
    (sut/insert!''' [:a :b] 3 t)
    (t/is (= 1 (sut/lookup''' [:a] t)))
    (t/is (= 2 (sut/lookup''' [:b] t)))
    (t/is (= 3 (sut/lookup''' [:a :b] t)))
    (t/is (false? (sut/lookup''' [:a :b :c] t)))
    (t/is (false? (sut/lookup''' [:a :b :d] t)))
    (sut/insert!''' [:a :b :c] 4 t)
    (t/is (= 1 (sut/lookup''' [:a] t)))
    (t/is (= 2 (sut/lookup''' [:b] t)))
    (t/is (= 3 (sut/lookup''' [:a :b] t)))
    (t/is (= 4 (sut/lookup''' [:a :b :c] t)))
    (t/is (false? (sut/lookup''' [:a :b :d] t)))
    (sut/insert!''' [:a :b :d] 5 t)
    (t/is (= 1 (sut/lookup''' [:a] t)))
    (t/is (= 2 (sut/lookup''' [:b] t)))
    (t/is (= 3 (sut/lookup''' [:a :b] t)))
    (t/is (= 4 (sut/lookup''' [:a :b :c] t)))
    (t/is (= 5 (sut/lookup''' [:a :b :d] t)))
    (sut/insert!''' [:a :b :c] 6 t)
    (t/is (= 1 (sut/lookup''' [:a] t)))
    (t/is (= 2 (sut/lookup''' [:b] t)))
    (t/is (= 3 (sut/lookup''' [:a :b] t)))
    (t/is (= 6 (sut/lookup''' [:a :b :c] t)))
    (t/is (= 5 (sut/lookup''' [:a :b :d] t)))))
